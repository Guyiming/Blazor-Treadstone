@page "/management/menu"
@inherits BasePage
@attribute [Authorize(PolicyString.MenuAuthorize)]
@inject RestMenuService _menuService

<MButtonGroup>
    <MButton Depressed Color="primary" OnClick="args=> { IsEdit = false;ShowDialog = true;CurrentMenu = new SysMenuDto() { ParentId=SelectedMenu?.Id??0,ParentName=SelectedMenu?.MenuName}; }">新增</MButton>
    <MButton Depressed Color="primary" OnClick="args=> { IsEdit = true;ShowDialog = true;CurrentMenu = SelectedMenu; }">编辑</MButton>
    @if (CheckedKeys?.Count() > 0)
    {
        <MButton Depressed Color="error" OnClick="DeleteBatchAsync">批量删除</MButton>
    }
</MButtonGroup>

<br />
<br />

<MTreeview Selectable TItem="SysMenuDto" TKey="long"
           @bind-Value="CheckedKeys"
           Items="AllMenus"
           ItemText="o=>o.MenuName"
           ItemChildren="o=>o.SubMenus"
           ItemKey="o=>o.Id"
           LoadChildren="LoadSubMenusAsync">
</MTreeview>


<PModal Title="@(IsEdit?"编辑菜单":"新增菜单")"
        @bind-value="IsShowDialog"
        OnSave="async args=>
             {
                 if(await SaveAsync())
                 {
                     IsShowDialog = false;
                 }
             }"
        OnCancel="args=> { IsShowDialog = false; }"
        Persistent>
    <MRow>
        <MCol Cols="4">
            <MSubheader>上级菜单</MSubheader>
        </MCol>
        <MCol Cols="8">
            <MTextField Disabled @bind-Value="CurrentMenu.ParentName"></MTextField>
        </MCol>
    </MRow>

    <MRow>
        <MCol Cols="4">
            <MSubheader>名称</MSubheader>
        </MCol>
        <MCol Cols="8">
            <MTextField Placeholder="" @bind-Value="@CurrentMenu.MenuName"></MTextField>
        </MCol>
    </MRow>

    <MRow>
        <MCol Cols="4">
            <MSubheader>路径</MSubheader>
        </MCol>
        <MCol Cols="8">
            <MTextField Placeholder="" @bind-Value="@CurrentMenu.Href"></MTextField>
        </MCol>
    </MRow>

    <MRow>
        <MCol Cols="4">
            <MSubheader>图标</MSubheader>
        </MCol>
        <MCol Cols="8">
            <MTextField Placeholder="" @bind-Value="@CurrentMenu.Icon"></MTextField>
        </MCol>
    </MRow>

    <MRow>
        <MCol Cols="4">
            <MSubheader>显示序号</MSubheader>
        </MCol>
        <MCol Cols="8">
            <MTextField @bind-Value="CurrentMenu.Icon"></MTextField>
        </MCol>
    </MRow>
</PModal>

@code {
    bool IsEdit = false, IsShowDialog, IsLoading;
    List<long> CheckedKeys = new List<long>();
    List<SysMenuDto> AllMenus;
    SysMenuDto SelectedMenu, CurrentMenu;

    protected override async Task OnInitializedAsync()
    {
        base.Title = "菜单管理";
        await base.OnInitializedAsync();

        IsLoading = true;

        base.OnInitialized();
        AllMenus = await LoadMenusAsync(null);
        IsLoading = false;
    }

    async Task<List<SysMenuDto>> LoadMenusAsync(long? parentId)
    {
        var result = await _menuService.GetByParentIdAsync(this, parentId);
        if (result != null)
        {
            return result;
        }
        return new List<SysMenuDto>();

    }

    async Task LoadSubMenusAsync(SysMenuDto dataItem)
    {
        var subMenus = await LoadMenusAsync(dataItem.Id);
        dataItem.SubMenus.Clear();
        dataItem.SubMenus.AddRange(subMenus);
    }

    async Task DeleteBatchAsync(MouseEventArgs args)
    {
        var result = await _menuService.DeleteAsync(this, CheckedKeys.ToList());
        ShowNotice(NotificationType.Info, "todo删除树中的节点");
    }

    async Task<bool> SaveAsync()
    {
        if (IsEdit)
        {
            //编辑
            var editMenu = await _menuService.EditAsync(this, CurrentMenu);
            if (editMenu != null)
            {
                var t = GetMenuInTree(AllMenus, CurrentMenu.Id);
                var index = AllMenus.IndexOf(t);
                AllMenus[index] = editMenu;
                ShowNotice(NotificationType.Success, "操作成功");
                return true;
            }

            return false;
        }
        else
        {
            //新增
            var newMenu = await _menuService.CreateAsync(this, CurrentMenu);
            if (newMenu != null)
            {
                var t = GetMenuInTree(AllMenus, newMenu.ParentId);
                if (t != null)
                {
                    t.SubMenus.Add(newMenu);
                }

                ShowNotice(NotificationType.Success, "添加成功");
                return true;
            }
            return false;
        }
    }

    SysMenuDto GetMenuInTree(List<SysMenuDto> datas, long? menuId)
    {

        foreach (var m in datas)
        {
            if (m.Id == menuId)
            {
                return m;
            }
            else
            {
                var t = GetMenuInTree(m.SubMenus, menuId);
                if (t != null)
                    return t;
            }
        }

        return null;
    }
}