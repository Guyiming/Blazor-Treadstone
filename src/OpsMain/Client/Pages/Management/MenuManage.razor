@page "/management/menu"
@inherits BasePage
@attribute [Authorize(PolicyString.MenuAuthorize)]
@inject RestMenuService MenuService

<Space>
    <SpaceItem>
        <Button Type="primary" OnClick="args=> { IsEdit = false;ShowDialog = true;CurrentMenu = new SysMenuDto() { ParentId=SelectedMenu?.Id??0,ParentName=SelectedMenu?.MenuName}; }">新增</Button>
    </SpaceItem>
    <SpaceItem>
        <Button OnClick="args=> { IsEdit = true;ShowDialog = true;CurrentMenu = SelectedMenu; }">编辑</Button>
    </SpaceItem>
    <SpaceItem>
        @if (CheckedKeys?.Count() > 0)
        {
            <Button Danger="true" OnClick="DeleteBatchAsync">批量删除</Button>
        }
    </SpaceItem>
</Space>

<br />
<br />
<Spin Size="large" Spinning="IsLoading">
    <Tree Checkable TItem="SysMenuDto"
          @bind-CheckedKeys="CheckedKeys"
          SelectedNodeChanged="OnSelectedNodeChanged"
          OnSelect="OnSelect"
          OnCheck="OnCheck"
          DataSource="AllMenus"
          IsLeafExpression="x=>x.TreeLevel>2"
          TitleExpression="t=>t.DataItem.MenuName"
          KeyExpression="t=>t.DataItem.Id.ToString()"
          ChildrenExpression="t=>t.DataItem.SubMenus"
          OnNodeLoadDelayAsync="LoadSubMenusAsync">
    </Tree>
</Spin>

<Modal Title="@(IsEdit?"编辑菜单":"新增菜单")"
       Visible="ShowDialog"
       OnOk="async args=>
             {
                 if(await SaveAsync())
                 {
                     ShowDialog = false;
                 }
             }"
       OnCancel="args=> { ShowDialog = false; }"
       MaskClosable="false">
    <Form Model="CurrentMenu" LabelColSpan="8" WrapperColSpan="16">
        <FormItem Label="上级菜单">
            <Input Disabled @bind-Value="CurrentMenu.ParentName" />
        </FormItem>
        <FormItem Label="名称">
            <AntDesign.Input Placeholder="" @bind-Value="@CurrentMenu.MenuName">
            </AntDesign.Input>
        </FormItem>
        <FormItem Label="路径">
            <AntDesign.Input Placeholder="" @bind-Value="@CurrentMenu.Href">
            </AntDesign.Input>
        </FormItem>
        <FormItem Label="图标">
            <AntDesign.Input Placeholder="" @bind-Value="@CurrentMenu.Icon">
            </AntDesign.Input>
        </FormItem>
        <FormItem Label="显示序号">
            <Input @bind-Value="CurrentMenu.Icon" />
        </FormItem>
    </Form>
</Modal>

@code {
    bool IsEdit = false, ShowDialog, IsLoading;
    string[] CheckedKeys = new string[] { };
    List<SysMenuDto> AllMenus;
    SysMenuDto SelectedMenu, CurrentMenu;

    protected override async Task OnInitializedAsync()
    {
        base.Title = "菜单管理";
        await base.OnInitializedAsync();

        IsLoading = true;

        base.OnInitialized();
        AllMenus = await LoadMenusAsync(null);
        IsLoading = false;
    }

    async Task<List<SysMenuDto>> LoadMenusAsync(long? parentId)
    {
        var result = await MenuService.GetByParentIdAsync(this, parentId);
        if (result != null)
        {
            return result;
        }
        return new List<SysMenuDto>();

    }

    async Task LoadSubMenusAsync(TreeEventArgs<SysMenuDto> args)
    {
        var dataItem = args.Node.DataItem;
        var subMenus = await LoadMenusAsync(dataItem.Id);
        dataItem.SubMenus.Clear();
        dataItem.SubMenus.AddRange(subMenus);
    }

    void OnSelect(TreeEventArgs<SysMenuDto> args)
    {
        SelectedMenu = args.Node.DataItem;
    }

    void OnCheck(TreeEventArgs<SysMenuDto> args)
    {
        Console.WriteLine($"OnCheck {args.Node.DataItem.MenuName}");
    }

    void OnSelectedNodeChanged(TreeNode<SysMenuDto> e)
    {
        Console.WriteLine($"SelectedNodeChanged: {e?.DataItem.MenuName}");
    }

    async Task DeleteBatchAsync(MouseEventArgs args)
    {
        var result = await MenuService.DeleteAsync(this, CheckedKeys.ToList());
        ShowNotice(NotificationType.Info, "todo删除树中的节点");
    }

    async Task<bool> SaveAsync()
    {
        if (IsEdit)
        {
            //编辑
            var editMenu = await MenuService.EditAsync(this, CurrentMenu);
            if (editMenu != null)
            {
                var t = GetMenuInTree(AllMenus, CurrentMenu.Id);
                var index = AllMenus.IndexOf(t);
                AllMenus[index] = editMenu;
                ShowNotice(NotificationType.Success, "操作成功");
                return true;
            }

            return false;
        }
        else
        {
            //新增
            var newMenu = await MenuService.CreateAsync(this, CurrentMenu);
            if (newMenu != null)
            {
                var t = GetMenuInTree(AllMenus, newMenu.ParentId);
                if (t != null)
                {
                    t.SubMenus.Add(newMenu);
                }

                ShowNotice(NotificationType.Success, "添加成功");
                return true;
            }
            return false;
        }
    }

    SysMenuDto GetMenuInTree(List<SysMenuDto> datas, long? menuId)
    {

        foreach (var m in datas)
        {
            if (m.Id == menuId)
            {
                return m;
            }
            else
            {
                var t = GetMenuInTree(m.SubMenus, menuId);
                if (t != null)
                    return t;
            }
        }

        return null;
    }
}